{"version":3,"sources":["components/search/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","className","type","name","id","value","keywords","onChange","e","handleSearch","target","Card","src","user","alt","width","CardList","users","map","u","index","key","App","state","bind","v","this","setState","console","log","fetch","then","response","json","filteredUsers","filter","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAOaA,G,YAAY,SAAAC,GAAK,OAC1B,2BAAOC,UAAU,aAAaC,KAAK,SAASC,KAAK,GAAGC,GAAG,GAAGC,MAAOL,EAAMM,SAAUC,SAAU,SAACC,GAAKR,EAAMS,aAAaD,EAAEE,OAAOL,YCFpHM,G,YAAO,SAAAX,GAAK,OACzB,6BAAM,yBAAKY,IAAG,+BAA0BZ,EAAMa,KAAKT,IAAMU,IAAI,GAAGC,MAAM,QAAQf,EAAMa,KAAKV,QCA5Ea,EAAW,SAAAhB,GAAK,OAC7B,6BAAMA,EAAMiB,MAAMC,KAAI,SAACC,EAAEC,GAAS,OAAO,kBAAC,EAAD,CAAMP,KAAMM,EAAGE,IAAKF,EAAEf,UCyBhDkB,E,YA5BX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDuB,MAAQ,CACTN,MAAO,GACPX,SAAU,IAEd,EAAKG,aAAe,EAAKA,aAAae,KAAlB,gBANL,E,0EAQNC,GAAI,IAAD,OAEZC,KAAKC,SAAS,CAAErB,SAAUmB,IAAK,WAAQG,QAAQC,IAAI,SAAU,EAAKN,Y,0CAEjD,IAAD,OAChBO,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAd,GAAK,OAAI,EAAKU,SAAS,CAAEV,MAAOA,S,+BAEpC,IAAD,EACuBS,KAAKH,MAAzBN,EADH,EACGA,MAAOX,EADV,EACUA,SACX4B,EAAgBjB,EAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAEhB,KAAKiC,SAAS9B,MACtD,OACI,6BACI,kBAAC,EAAD,CAAWG,aAAciB,KAAKjB,aAAcH,SAAUoB,KAAKH,MAAMjB,WACjE,kBAAC,EAAD,CAAUW,MAAOiB,S,GAxBfG,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.7049f0ac.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css'\n\n\n// function SearchBox(){\n//     return \n// }\nexport const SearchBox = props =>(\n    <input className='search-box' type=\"search\" name=\"\" id=\"\" value={props.keywords} onChange={(e)=>{props.handleSearch(e.target.value)}}/>)","import React from 'react';\nimport './card.styles.css'\n\n// function SearchBox(){\n//     return \n// }\nexport const Card = props =>(\n<div ><img src={`https://robohash.org/${props.user.id}`} alt=\"\" width='100'/>{props.user.name}</div>)","import React from 'react';\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\n// function SearchBox(){\n//     return \n// }\nexport const CardList = props =>(\n<div>{props.users.map((u,index)=>{return <Card user={u} key={u.id}/>})}</div>)","import React from 'react'\nimport './App.css';\nimport { SearchBox } from './components/search/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            keywords: ''\n        }\n        this.handleSearch = this.handleSearch.bind(this)\n    }\n    handleSearch(v) {\n\n        this.setState({ keywords: v }, () => { console.log('search', this.state) })\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ users: users }))\n    }\n    render() {\n        const { users, keywords } = this.state;\n        let filteredUsers = users.filter(u => u.name.includes(keywords))\n        return (\n            <div>\n                <SearchBox handleSearch={this.handleSearch} keywords={this.state.keywords} />\n                <CardList users={filteredUsers} />\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}